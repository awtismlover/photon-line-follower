
PhotonConfig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005594  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ac  080057ac  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b4  080057b4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  080057c8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080057c8  00007394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179b9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002927  00000000  00000000  0001e9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00021320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112a  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f48  00000000  00000000  00023a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd4  00000000  00000000  0004b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110df9  00000000  00000000  0006454e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175347  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd4  00000000  00000000  0017538c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  0017b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005754 	.word	0x08005754

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005754 	.word	0x08005754

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 ff39 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f816 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fb6a 	bl	8000bec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000518:	f000 f85e 	bl	80005d8 <MX_ADC1_Init>
  MX_SPI2_Init();
 800051c:	f000 f93a 	bl	8000794 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000520:	f000 f9b4 	bl	800088c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000524:	f000 fac0 	bl	8000aa8 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000528:	f000 f8ce 	bl	80006c8 <MX_ADC2_Init>
  MX_SPI3_Init();
 800052c:	f000 f970 	bl	8000810 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000530:	f000 fa06 	bl	8000940 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fa5e 	bl	80009f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000538:	f000 fb0c 	bl	8000b54 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x34>

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	@ 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 f8d4 	bl	80056fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000562:	2000      	movs	r0, #0
 8000564:	f002 fafc 	bl	8002b60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	@ 0x40
 8000574:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057e:	2304      	movs	r3, #4
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000582:	2355      	movs	r3, #85	@ 0x55
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fb96 	bl	8002cc8 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a2:	f000 fbad 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fe94 	bl	80032ec <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ca:	f000 fb99 	bl	8000d00 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	@ 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	@ 0x30
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2220      	movs	r2, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 f883 	bl	80056fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f6:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 80005f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000600:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000620:	2204      	movs	r2, #4
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000632:	2201      	movs	r2, #1
 8000634:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000662:	f001 f8d5 	bl	8001810 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800066c:	f000 fb48 	bl	8000d00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 800067c:	f001 feea 	bl	8002454 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000686:	f000 fb3b 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_ADC1_Init+0xec>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 80006a8:	f001 fa6e 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006b2:	f000 fb25 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 f811 	bl	80056fc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006dc:	4a2b      	ldr	r2, [pc, #172]	@ (800078c <MX_ADC2_Init+0xc4>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <MX_ADC2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000702:	2204      	movs	r2, #4
 8000704:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000714:	2201      	movs	r2, #1
 8000716:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000742:	4811      	ldr	r0, [pc, #68]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000744:	f001 f864 	bl	8001810 <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800074e:	f000 fad7 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_ADC2_Init+0xc8>)
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2306      	movs	r3, #6
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075e:	237f      	movs	r3, #127	@ 0x7f
 8000760:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_ADC2_Init+0xc0>)
 8000770:	f001 fa0a 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800077a:	f000 fac1 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000094 	.word	0x20000094
 800078c:	50000100 	.word	0x50000100
 8000790:	47520000 	.word	0x47520000

08000794 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_SPI2_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <MX_SPI2_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_SPI2_Init+0x74>)
 80007f4:	f003 f9e4 	bl	8003bc0 <HAL_SPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fa7f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000100 	.word	0x20000100
 800080c:	40003800 	.word	0x40003800

08000810 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_SPI3_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_SPI3_Init+0x74>)
 800081c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_SPI3_Init+0x74>)
 800082a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800082e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_SPI3_Init+0x74>)
 800083e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000842:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000846:	2210      	movs	r2, #16
 8000848:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_SPI3_Init+0x74>)
 800085e:	2207      	movs	r2, #7
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_SPI3_Init+0x74>)
 800086a:	2208      	movs	r2, #8
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_SPI3_Init+0x74>)
 8000870:	f003 f9a6 	bl	8003bc0 <HAL_SPI_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fa41 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000164 	.word	0x20000164
 8000888:	40003c00 	.word	0x40003c00

0800088c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2224      	movs	r2, #36	@ 0x24
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 ff2e 	bl	80056fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008ac:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_TIM1_Init+0xb0>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_TIM1_Init+0xac>)
 8000902:	f003 fa5f 	bl	8003dc4 <HAL_TIM_Encoder_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800090c:	f000 f9f8 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_TIM1_Init+0xac>)
 8000922:	f003 ffe7 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800092c:	f000 f9e8 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	@ 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001c8 	.word	0x200001c8
 800093c:	40012c00 	.word	0x40012c00

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800097a:	f04f 32ff 	mov.w	r2, #4294967295
 800097e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800098c:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 800098e:	f003 f9c2 	bl	8003d16 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 f9b2 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009ac:	f003 ffa2 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009b6:	f000 f9a3 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	220c      	movs	r2, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009d2:	f003 fa9d 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009dc:	f000 f990 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <MX_TIM2_Init+0xb0>)
 80009e2:	f000 fbaf 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000214 	.word	0x20000214

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <MX_TIM3_Init+0xb0>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a40:	f003 f969 	bl	8003d16 <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a4a:	f000 f959 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a5e:	f003 ff49 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a68:	f000 f94a 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2360      	movs	r3, #96	@ 0x60
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	220c      	movs	r2, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a84:	f003 fa44 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 f937 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <MX_TIM3_Init+0xac>)
 8000a94:	f000 fb56 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000260 	.word	0x20000260
 8000aa4:	40000400 	.word	0x40000400

08000aa8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2224      	movs	r2, #36	@ 0x24
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 fe20 	bl	80056fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <MX_TIM4_Init+0xa8>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000b18:	f003 f954 	bl	8003dc4 <HAL_TIM_Encoder_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b22:	f000 f8ed 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_TIM4_Init+0xa4>)
 8000b34:	f003 fede 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b3e:	f000 f8df 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	@ 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200002ac 	.word	0x200002ac
 8000b50:	40000800 	.word	0x40000800

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b9e:	f003 ff3f 	bl	8004a20 <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f8aa 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bb0:	f004 fcda 	bl	8005568 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f8a1 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f004 fd0f 	bl	80055e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f898 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f004 fc90 	bl	80054f6 <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f890 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002f8 	.word	0x200002f8
 8000be8:	40013800 	.word	0x40013800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	4a35      	ldr	r2, [pc, #212]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c26:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a29      	ldr	r2, [pc, #164]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_GPIO_Init+0x108>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS2_Pin|SPI2_CS_Pin|LED4_Pin|LED3_Pin
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f641 01f0 	movw	r1, #6384	@ 0x18f0
 8000c80:	481d      	ldr	r0, [pc, #116]	@ (8000cf8 <MX_GPIO_Init+0x10c>)
 8000c82:	f001 ff55 	bl	8002b30 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c90:	f001 ff4e 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS2_Pin SPI2_CS_Pin LED4_Pin LED3_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS2_Pin|SPI2_CS_Pin|LED4_Pin|LED3_Pin
 8000c94:	f641 03f0 	movw	r3, #6384	@ 0x18f0
 8000c98:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4812      	ldr	r0, [pc, #72]	@ (8000cf8 <MX_GPIO_Init+0x10c>)
 8000cae:	f001 fdbd 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cce:	f001 fdad 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_INT_Pin */
  GPIO_InitStruct.Pin = SPI3_INT_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI3_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_GPIO_Init+0x110>)
 8000ce8:	f001 fda0 	bl	800282c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000c00 	.word	0x48000c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d42:	f001 ffb1 	bl	8002ca8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0a2      	sub	sp, #136	@ 0x88
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	2254      	movs	r2, #84	@ 0x54
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fcc1 	bl	80056fc <memset>
  if(hadc->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d82:	d16e      	bne.n	8000e62 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d8e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fcc5 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000da0:	f7ff ffae 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000da4:	4b52      	ldr	r3, [pc, #328]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a51      	ldr	r2, [pc, #324]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000dac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dae:	4b50      	ldr	r3, [pc, #320]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10b      	bne.n	8000dce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000db6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b49      	ldr	r3, [pc, #292]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a48      	ldr	r2, [pc, #288]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b46      	ldr	r3, [pc, #280]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a42      	ldr	r2, [pc, #264]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b40      	ldr	r3, [pc, #256]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e16:	230f      	movs	r3, #15
 8000e18:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e26:	4619      	mov	r1, r3
 8000e28:	4833      	ldr	r0, [pc, #204]	@ (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e2a:	f001 fcff 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	230f      	movs	r3, #15
 8000e30:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f001 fcf2 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN15_Batt_Pin;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ADC1_IN15_Batt_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4828      	ldr	r0, [pc, #160]	@ (8000efc <HAL_ADC_MspInit+0x1a8>)
 8000e5c:	f001 fce6 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e60:	e042      	b.n	8000ee8 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a26      	ldr	r2, [pc, #152]	@ (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d13d      	bne.n	8000ee8 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fc51 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x138>
      Error_Handler();
 8000e88:	f7ff ff3a 	bl	8000d00 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_ADC_MspInit+0x162>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000ea4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ece:	23f0      	movs	r3, #240	@ 0xf0
 8000ed0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee4:	f001 fca2 	bl	800282c <HAL_GPIO_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	3788      	adds	r7, #136	@ 0x88
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000038c 	.word	0x2000038c
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000400 	.word	0x48000400
 8000f00:	50000100 	.word	0x50000100

08000f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe0 <HAL_SPI_MspInit+0xdc>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d129      	bne.n	8000f7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f32:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a28      	ldr	r2, [pc, #160]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f56:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <HAL_SPI_MspInit+0xe4>)
 8000f74:	f001 fc5a 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f78:	e02d      	b.n	8000fd6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <HAL_SPI_MspInit+0xe8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d128      	bne.n	8000fd6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_SPI_MspInit+0xe0>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fb4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <HAL_SPI_MspInit+0xec>)
 8000fd2:	f001 fc2b 	bl	800282c <HAL_GPIO_Init>
}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40003800 	.word	0x40003800
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a30      	ldr	r2, [pc, #192]	@ (80010d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12a      	bne.n	800106c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001016:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	4a2f      	ldr	r2, [pc, #188]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800101c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001020:	6613      	str	r3, [r2, #96]	@ 0x60
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001058:	2306      	movs	r3, #6
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001066:	f001 fbe1 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800106a:	e02e      	b.n	80010ca <HAL_TIM_Encoder_MspInit+0xd6>
  else if(htim_encoder->Instance==TIM4)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1a      	ldr	r2, [pc, #104]	@ (80010dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d129      	bne.n	80010ca <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6593      	str	r3, [r2, #88]	@ 0x58
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80010b8:	230a      	movs	r3, #10
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f001 fbb1 	bl	800282c <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	@ 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40000800 	.word	0x40000800

080010e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f0:	d10c      	bne.n	800110c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800110a:	e010      	b.n	800112e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <HAL_TIM_PWM_MspInit+0x60>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10b      	bne.n	800112e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_TIM_PWM_MspInit+0x5c>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001164:	d11e      	bne.n	80011a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_L_TIM2_CH4_Pin;
 800117e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001190:	230a      	movs	r3, #10
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_L_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f001 fb45 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011a2:	e021      	b.n	80011e8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <HAL_TIM_MspPostInit+0xb0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d11c      	bne.n	80011e8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_TIM_MspPostInit+0xac>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_TIM3_CH4_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d8:	2302      	movs	r3, #2
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_R_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_TIM_MspPostInit+0xb4>)
 80011e4:	f001 fb22 	bl	800282c <HAL_GPIO_Init>
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40000400 	.word	0x40000400
 80011f8:	48000800 	.word	0x48000800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09e      	sub	sp, #120	@ 0x78
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2254      	movs	r2, #84	@ 0x54
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fa6d 	bl	80056fc <memset>
  if(huart->Instance==USART1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_UART_MspInit+0xa4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d135      	bne.n	8001298 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fa73 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff fd5c 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 800124a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124c:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001252:	6613      	str	r3, [r2, #96]	@ 0x60
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_UART_MspInit+0xa8>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001278:	2330      	movs	r3, #48	@ 0x30
 800127a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001288:	2307      	movs	r3, #7
 800128a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <HAL_UART_MspInit+0xac>)
 8001294:	f001 faca 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001298:	bf00      	nop
 800129a:	3778      	adds	r7, #120	@ 0x78
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000800 	.word	0x48000800

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 f891 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001332:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f004 f9d5 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff f8d1 	bl	8000508 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   r0, =_estack
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001374:	080057bc 	.word	0x080057bc
  ldr r2, =_sbss
 8001378:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800137c:	20000394 	.word	0x20000394

08001380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_2_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f001 fa1b 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff fcb2 	bl	8000d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]

}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d022      	beq.n	800140e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_InitTick+0x6c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_InitTick+0x68>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 fa18 	bl	8002812 <HAL_SYSTICK_Config>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10f      	bne.n	8001408 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d809      	bhi.n	8001402 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f04f 30ff 	mov.w	r0, #4294967295
 80013f6:	f001 f9f2 	bl	80027de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_InitTick+0x70>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e007      	b.n	8001412 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e004      	b.n	8001412 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000008 	.word	0x20000008
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_IncTick+0x1c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x20>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <HAL_IncTick+0x1c>)
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000390 	.word	0x20000390
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000390 	.word	0x20000390

08001464 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	609a      	str	r2, [r3, #8]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3360      	adds	r3, #96	@ 0x60
 80014de:	461a      	mov	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <LL_ADC_SetOffset+0x44>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	03fff000 	.word	0x03fff000

08001514 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3360      	adds	r3, #96	@ 0x60
 8001522:	461a      	mov	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3360      	adds	r3, #96	@ 0x60
 8001550:	461a      	mov	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3360      	adds	r3, #96	@ 0x60
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	431a      	orrs	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3360      	adds	r3, #96	@ 0x60
 80015bc:	461a      	mov	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	615a      	str	r2, [r3, #20]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3330      	adds	r3, #48	@ 0x30
 8001618:	461a      	mov	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	4413      	add	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	211f      	movs	r1, #31
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0e9b      	lsrs	r3, r3, #26
 8001640:	f003 011f 	and.w	r1, r3, #31
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3314      	adds	r3, #20
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0e5b      	lsrs	r3, r3, #25
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0d1b      	lsrs	r3, r3, #20
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2107      	movs	r1, #7
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0d1b      	lsrs	r3, r3, #20
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0318 	and.w	r3, r3, #24
 80016da:	4908      	ldr	r1, [pc, #32]	@ (80016fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016dc:	40d9      	lsrs	r1, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	400b      	ands	r3, r1
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	431a      	orrs	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	0007ffff 	.word	0x0007ffff

08001700 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6093      	str	r3, [r2, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001738:	d101      	bne.n	800173e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800175c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001760:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001788:	d101      	bne.n	800178e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <LL_ADC_IsEnabled+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_ADC_IsEnabled+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d101      	bne.n	80017da <LL_ADC_REG_IsConversionOngoing+0x18>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d101      	bne.n	8001800 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1a9      	b.n	8001b7e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fa8b 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff67 	bl	8001724 <LL_ADC_IsDeepPowerDownEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff4d 	bl	8001700 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff82 	bl	8001774 <LL_ADC_IsInternalRegulatorEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff66 	bl	800174c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001880:	4b9c      	ldr	r3, [pc, #624]	@ (8001af4 <HAL_ADC_Init+0x2e4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	4a9c      	ldr	r2, [pc, #624]	@ (8001af8 <HAL_ADC_Init+0x2e8>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	3301      	adds	r3, #1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001894:	e002      	b.n	800189c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3b01      	subs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff64 	bl	8001774 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff75 	bl	80017c2 <LL_ADC_REG_IsConversionOngoing>
 80018d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8142 	bne.w	8001b6c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 813e 	bne.w	8001b6c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff49 	bl	800179c <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d141      	bne.n	8001994 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001918:	d004      	beq.n	8001924 <HAL_ADC_Init+0x114>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	@ (8001afc <HAL_ADC_Init+0x2ec>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_ADC_Init+0x134>
 8001924:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001928:	f7ff ff38 	bl	800179c <LL_ADC_IsEnabled>
 800192c:	4604      	mov	r4, r0
 800192e:	4873      	ldr	r0, [pc, #460]	@ (8001afc <HAL_ADC_Init+0x2ec>)
 8001930:	f7ff ff34 	bl	800179c <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	4323      	orrs	r3, r4
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e012      	b.n	800196a <HAL_ADC_Init+0x15a>
 8001944:	486e      	ldr	r0, [pc, #440]	@ (8001b00 <HAL_ADC_Init+0x2f0>)
 8001946:	f7ff ff29 	bl	800179c <LL_ADC_IsEnabled>
 800194a:	4604      	mov	r4, r0
 800194c:	486d      	ldr	r0, [pc, #436]	@ (8001b04 <HAL_ADC_Init+0x2f4>)
 800194e:	f7ff ff25 	bl	800179c <LL_ADC_IsEnabled>
 8001952:	4603      	mov	r3, r0
 8001954:	431c      	orrs	r4, r3
 8001956:	486c      	ldr	r0, [pc, #432]	@ (8001b08 <HAL_ADC_Init+0x2f8>)
 8001958:	f7ff ff20 	bl	800179c <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	4323      	orrs	r3, r4
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d012      	beq.n	8001994 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Init+0x172>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5f      	ldr	r2, [pc, #380]	@ (8001afc <HAL_ADC_Init+0x2ec>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x176>
 8001982:	4a62      	ldr	r2, [pc, #392]	@ (8001b0c <HAL_ADC_Init+0x2fc>)
 8001984:	e000      	b.n	8001988 <HAL_ADC_Init+0x178>
 8001986:	4a62      	ldr	r2, [pc, #392]	@ (8001b10 <HAL_ADC_Init+0x300>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff fd68 	bl	8001464 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7f5b      	ldrb	r3, [r3, #29]
 8001998:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d106      	bne.n	80019d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	3b01      	subs	r3, #1
 80019c8:	045b      	lsls	r3, r3, #17
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b48      	ldr	r3, [pc, #288]	@ (8001b14 <HAL_ADC_Init+0x304>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fee4 	bl	80017e8 <LL_ADC_INJ_IsConversionOngoing>
 8001a20:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d17f      	bne.n	8001b28 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d17c      	bne.n	8001b28 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a4a:	f023 0302 	bic.w	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6911      	ldr	r1, [r2, #16]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a8e:	e013      	b.n	8001ab8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ab4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12a      	bne.n	8001b18 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	e019      	b.n	8001b28 <HAL_ADC_Init+0x318>
 8001af4:	20000000 	.word	0x20000000
 8001af8:	053e2d63 	.word	0x053e2d63
 8001afc:	50000100 	.word	0x50000100
 8001b00:	50000400 	.word	0x50000400
 8001b04:	50000500 	.word	0x50000500
 8001b08:	50000600 	.word	0x50000600
 8001b0c:	50000300 	.word	0x50000300
 8001b10:	50000700 	.word	0x50000700
 8001b14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10c      	bne.n	8001b4a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f023 010f 	bic.w	r1, r3, #15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b48:	e007      	b.n	8001b5a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 020f 	bic.w	r2, r2, #15
 8001b58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b6a:	e007      	b.n	8001b7c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop

08001b88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0b6      	sub	sp, #216	@ 0xd8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x24>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f000 bc13 	b.w	80023d2 <HAL_ADC_ConfigChannel+0x84a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe02 	bl	80017c2 <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 83f3 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f7ff fd18 	bl	8001608 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fdf0 	bl	80017c2 <LL_ADC_REG_IsConversionOngoing>
 8001be2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fdfc 	bl	80017e8 <LL_ADC_INJ_IsConversionOngoing>
 8001bf0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 81d9 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 81d4 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c10:	d10f      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff fd1f 	bl	8001660 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fcd9 	bl	80015e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c30:	e00e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f7ff fd0e 	bl	8001660 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fcc9 	bl	80015e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d022      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c82:	f7ff fc23 	bl	80014cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f7ff fc6f 	bl	8001576 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d102      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x126>
 8001ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x128>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f7ff fc7b 	bl	80015ac <LL_ADC_SetOffsetSaturation>
 8001cb6:	e17b      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc28 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x15c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fc1d 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 021f 	and.w	r2, r3, #31
 8001ce2:	e01e      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x19a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fc12 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e004      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x1b2>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	e018      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1e4>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e004      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fbe1 	bl	8001540 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fbc5 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x222>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fbba 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	e01e      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x260>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fbaf 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001dc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	e004      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x278>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	e018      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x2aa>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e004      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fb7e 	bl	8001540 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fb62 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x2e8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb57 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	e01e      	b.n	8001eae <HAL_ADC_ConfigChannel+0x326>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2102      	movs	r1, #2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fb4c 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e004      	b.n	8001eac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x33e>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	e016      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x36c>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ed8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb1d 	bl	8001540 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb01 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x3aa>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2103      	movs	r1, #3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff faf6 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	e017      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x3da>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2103      	movs	r1, #3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff faeb 	bl	8001514 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x3f2>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	e011      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x416>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d106      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fac8 	bl	8001540 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbf1 	bl	800179c <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 813d 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7ff fb72 	bl	80016b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4aa2      	ldr	r2, [pc, #648]	@ (8002264 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f040 812e 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x480>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e019      	b.n	800203c <HAL_ADC_ConfigChannel+0x4b4>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002018:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800201a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e003      	b.n	800202c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2b09      	cmp	r3, #9
 8002034:	bf94      	ite	ls
 8002036:	2301      	movls	r3, #1
 8002038:	2300      	movhi	r3, #0
 800203a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203c:	2b00      	cmp	r3, #0
 800203e:	d079      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x4d4>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	3301      	adds	r3, #1
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205a:	e015      	b.n	8002088 <HAL_ADC_ConfigChannel+0x500>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800206a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800206c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800206e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x520>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	3301      	adds	r3, #1
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	e017      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x550>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80020b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80020ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x576>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	3301      	adds	r3, #1
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	051b      	lsls	r3, r3, #20
 80020fc:	e018      	b.n	8002130 <HAL_ADC_ConfigChannel+0x5a8>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800210c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800211a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002130:	430b      	orrs	r3, r1
 8002132:	e07e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x5c8>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	069b      	lsls	r3, r3, #26
 800214a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800214e:	e015      	b.n	800217c <HAL_ADC_ConfigChannel+0x5f4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e003      	b.n	8002174 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	069b      	lsls	r3, r3, #26
 8002178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_ADC_ConfigChannel+0x614>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	3301      	adds	r3, #1
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	e017      	b.n	80021cc <HAL_ADC_ConfigChannel+0x644>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	61fb      	str	r3, [r7, #28]
  return result;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x670>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	3b1e      	subs	r3, #30
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	e01b      	b.n	8002230 <HAL_ADC_ConfigChannel+0x6a8>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	613b      	str	r3, [r7, #16]
  return result;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff fa12 	bl	8001660 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_ADC_ConfigChannel+0x6e0>)
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80be 	beq.w	80023c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002252:	d004      	beq.n	800225e <HAL_ADC_ConfigChannel+0x6d6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_ADC_ConfigChannel+0x6e4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x6ec>
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_ADC_ConfigChannel+0x6e8>)
 8002260:	e009      	b.n	8002276 <HAL_ADC_ConfigChannel+0x6ee>
 8002262:	bf00      	nop
 8002264:	407f0000 	.word	0x407f0000
 8002268:	80080000 	.word	0x80080000
 800226c:	50000100 	.word	0x50000100
 8002270:	50000300 	.word	0x50000300
 8002274:	4b59      	ldr	r3, [pc, #356]	@ (80023dc <HAL_ADC_ConfigChannel+0x854>)
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f91a 	bl	80014b0 <LL_ADC_GetCommonPathInternalCh>
 800227c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <HAL_ADC_ConfigChannel+0x858>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x70c>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a55      	ldr	r2, [pc, #340]	@ (80023e4 <HAL_ADC_ConfigChannel+0x85c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d13a      	bne.n	800230a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d134      	bne.n	800230a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a8:	d005      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x72e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4e      	ldr	r2, [pc, #312]	@ (80023e8 <HAL_ADC_ConfigChannel+0x860>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f040 8085 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022be:	d004      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x742>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a49      	ldr	r2, [pc, #292]	@ (80023ec <HAL_ADC_ConfigChannel+0x864>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x746>
 80022ca:	4a49      	ldr	r2, [pc, #292]	@ (80023f0 <HAL_ADC_ConfigChannel+0x868>)
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x748>
 80022ce:	4a43      	ldr	r2, [pc, #268]	@ (80023dc <HAL_ADC_ConfigChannel+0x854>)
 80022d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f7ff f8d5 	bl	800148a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_ADC_ConfigChannel+0x86c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	4a44      	ldr	r2, [pc, #272]	@ (80023f8 <HAL_ADC_ConfigChannel+0x870>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022fa:	e002      	b.n	8002302 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3b01      	subs	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002308:	e05a      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3b      	ldr	r2, [pc, #236]	@ (80023fc <HAL_ADC_ConfigChannel+0x874>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d125      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11f      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a31      	ldr	r2, [pc, #196]	@ (80023ec <HAL_ADC_ConfigChannel+0x864>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d104      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x7ac>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a34      	ldr	r2, [pc, #208]	@ (8002400 <HAL_ADC_ConfigChannel+0x878>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d047      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233c:	d004      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x7c0>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <HAL_ADC_ConfigChannel+0x864>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x7c4>
 8002348:	4a29      	ldr	r2, [pc, #164]	@ (80023f0 <HAL_ADC_ConfigChannel+0x868>)
 800234a:	e000      	b.n	800234e <HAL_ADC_ConfigChannel+0x7c6>
 800234c:	4a23      	ldr	r2, [pc, #140]	@ (80023dc <HAL_ADC_ConfigChannel+0x854>)
 800234e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f7ff f896 	bl	800148a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800235e:	e031      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_ADC_ConfigChannel+0x87c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12d      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800236a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800236e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d127      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_ADC_ConfigChannel+0x864>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002388:	d004      	beq.n	8002394 <HAL_ADC_ConfigChannel+0x80c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a17      	ldr	r2, [pc, #92]	@ (80023ec <HAL_ADC_ConfigChannel+0x864>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x810>
 8002394:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <HAL_ADC_ConfigChannel+0x868>)
 8002396:	e000      	b.n	800239a <HAL_ADC_ConfigChannel+0x812>
 8002398:	4a10      	ldr	r2, [pc, #64]	@ (80023dc <HAL_ADC_ConfigChannel+0x854>)
 800239a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800239e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7ff f870 	bl	800148a <LL_ADC_SetCommonPathInternalCh>
 80023aa:	e00c      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80023be:	e002      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c0:	bf00      	nop
 80023c2:	e000      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	37d8      	adds	r7, #216	@ 0xd8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	50000700 	.word	0x50000700
 80023e0:	c3210000 	.word	0xc3210000
 80023e4:	90c00010 	.word	0x90c00010
 80023e8:	50000600 	.word	0x50000600
 80023ec:	50000100 	.word	0x50000100
 80023f0:	50000300 	.word	0x50000300
 80023f4:	20000000 	.word	0x20000000
 80023f8:	053e2d63 	.word	0x053e2d63
 80023fc:	c7520000 	.word	0xc7520000
 8002400:	50000500 	.word	0x50000500
 8002404:	cb840000 	.word	0xcb840000

08002408 <LL_ADC_IsEnabled>:
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <LL_ADC_IsEnabled+0x18>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LL_ADC_IsEnabled+0x1a>
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_REG_IsConversionOngoing>:
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d101      	bne.n	8002446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b0a1      	sub	sp, #132	@ 0x84
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800246e:	2302      	movs	r3, #2
 8002470:	e0e7      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800247a:	2300      	movs	r3, #0
 800247c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800247e:	2300      	movs	r3, #0
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248a:	d102      	bne.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800248c:	4b6f      	ldr	r3, [pc, #444]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	e009      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d102      	bne.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800249c:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e001      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0be      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ffb1 	bl	800242e <LL_ADC_REG_IsConversionOngoing>
 80024cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ffab 	bl	800242e <LL_ADC_REG_IsConversionOngoing>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80a0 	bne.w	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 809c 	bne.w	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f0:	d004      	beq.n	80024fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a55      	ldr	r2, [pc, #340]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80024fc:	4b56      	ldr	r3, [pc, #344]	@ (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80024fe:	e000      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002500:	4b56      	ldr	r3, [pc, #344]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002502:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d04b      	beq.n	80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800250c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800251e:	035b      	lsls	r3, r3, #13
 8002520:	430b      	orrs	r3, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002526:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002530:	d004      	beq.n	800253c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a45      	ldr	r2, [pc, #276]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10f      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800253c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002540:	f7ff ff62 	bl	8002408 <LL_ADC_IsEnabled>
 8002544:	4604      	mov	r4, r0
 8002546:	4841      	ldr	r0, [pc, #260]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002548:	f7ff ff5e 	bl	8002408 <LL_ADC_IsEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	4323      	orrs	r3, r4
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800255c:	483c      	ldr	r0, [pc, #240]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800255e:	f7ff ff53 	bl	8002408 <LL_ADC_IsEnabled>
 8002562:	4604      	mov	r4, r0
 8002564:	483b      	ldr	r0, [pc, #236]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002566:	f7ff ff4f 	bl	8002408 <LL_ADC_IsEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	431c      	orrs	r4, r3
 800256e:	483c      	ldr	r0, [pc, #240]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002570:	f7ff ff4a 	bl	8002408 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d056      	beq.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6811      	ldr	r1, [r2, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025a2:	e047      	b.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b8:	d004      	beq.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a23      	ldr	r2, [pc, #140]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10f      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80025c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025c8:	f7ff ff1e 	bl	8002408 <LL_ADC_IsEnabled>
 80025cc:	4604      	mov	r4, r0
 80025ce:	481f      	ldr	r0, [pc, #124]	@ (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025d0:	f7ff ff1a 	bl	8002408 <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4323      	orrs	r3, r4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e012      	b.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80025e4:	481a      	ldr	r0, [pc, #104]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025e6:	f7ff ff0f 	bl	8002408 <LL_ADC_IsEnabled>
 80025ea:	4604      	mov	r4, r0
 80025ec:	4819      	ldr	r0, [pc, #100]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025ee:	f7ff ff0b 	bl	8002408 <LL_ADC_IsEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	431c      	orrs	r4, r3
 80025f6:	481a      	ldr	r0, [pc, #104]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025f8:	f7ff ff06 	bl	8002408 <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4323      	orrs	r3, r4
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800260e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002616:	f023 030f 	bic.w	r3, r3, #15
 800261a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800261c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800261e:	e009      	b.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002632:	e000      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002634:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800263e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002642:	4618      	mov	r0, r3
 8002644:	3784      	adds	r7, #132	@ 0x84
 8002646:	46bd      	mov	sp, r7
 8002648:	bd90      	pop	{r4, r7, pc}
 800264a:	bf00      	nop
 800264c:	50000100 	.word	0x50000100
 8002650:	50000400 	.word	0x50000400
 8002654:	50000500 	.word	0x50000500
 8002658:	50000300 	.word	0x50000300
 800265c:	50000700 	.word	0x50000700
 8002660:	50000600 	.word	0x50000600

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	@ (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	@ (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f7ff ff8e 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff47 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff5e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff90 	bl	800271c <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5f 	bl	80026c8 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffb2 	bl	8002784 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800283a:	e15a      	b.n	8002af2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 814c 	beq.w	8002aec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d017      	beq.n	800290a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d123      	bne.n	800295e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a6 	beq.w	8002aec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ac:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b8:	4a56      	ldr	r2, [pc, #344]	@ (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029e2:	d01f      	beq.n	8002a24 <HAL_GPIO_Init+0x1f8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002b18 <HAL_GPIO_Init+0x2ec>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d019      	beq.n	8002a20 <HAL_GPIO_Init+0x1f4>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a4b      	ldr	r2, [pc, #300]	@ (8002b1c <HAL_GPIO_Init+0x2f0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_GPIO_Init+0x1f0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_GPIO_Init+0x2f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00d      	beq.n	8002a18 <HAL_GPIO_Init+0x1ec>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a49      	ldr	r2, [pc, #292]	@ (8002b24 <HAL_GPIO_Init+0x2f8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <HAL_GPIO_Init+0x1e8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a48      	ldr	r2, [pc, #288]	@ (8002b28 <HAL_GPIO_Init+0x2fc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_GPIO_Init+0x1e4>
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	e00a      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a10:	2306      	movs	r3, #6
 8002a12:	e008      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e004      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e002      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a24:	2300      	movs	r3, #0
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	f002 0203 	and.w	r2, r2, #3
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a36:	4937      	ldr	r1, [pc, #220]	@ (8002b14 <HAL_GPIO_Init+0x2e8>)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a44:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a68:	4a30      	ldr	r2, [pc, #192]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a92:	4a26      	ldr	r2, [pc, #152]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a98:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae6:	4a11      	ldr	r2, [pc, #68]	@ (8002b2c <HAL_GPIO_Init+0x300>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f ae9d 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010000 	.word	0x40010000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	48000c00 	.word	0x48000c00
 8002b24:	48001000 	.word	0x48001000
 8002b28:	48001400 	.word	0x48001400
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d141      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7a:	d131      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b7c:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b82:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b8c:	4b43      	ldr	r3, [pc, #268]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b94:	4a41      	ldr	r2, [pc, #260]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b9c:	4b40      	ldr	r3, [pc, #256]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2232      	movs	r2, #50	@ 0x32
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb2:	e002      	b.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc6:	d102      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f2      	bne.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bce:	4b33      	ldr	r3, [pc, #204]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d158      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e057      	b.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bf0:	e04d      	b.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf8:	d141      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfa:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c06:	d131      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0e:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c18:	4b20      	ldr	r3, [pc, #128]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c20:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2232      	movs	r2, #50	@ 0x32
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3e:	e002      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c52:	d102      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f2      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	d112      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e011      	b.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c7c:	e007      	b.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb6:	6093      	str	r3, [r2, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e2fe      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d075      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce6:	4b97      	ldr	r3, [pc, #604]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf0:	4b94      	ldr	r3, [pc, #592]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3e>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_OscConfig+0x44>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d10b      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05b      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d157      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e2d9      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x74>
 8002d2e:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a84      	ldr	r2, [pc, #528]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b7c      	ldr	r3, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7b      	ldr	r2, [pc, #492]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d60:	4b78      	ldr	r3, [pc, #480]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a77      	ldr	r2, [pc, #476]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b75      	ldr	r3, [pc, #468]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a74      	ldr	r2, [pc, #464]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fb64 	bl	800144c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fb60 	bl	800144c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e29e      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xc0>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb50 	bl	800144c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fb4c 	bl	800144c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e28a      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	4b60      	ldr	r3, [pc, #384]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0xe8>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d075      	beq.n	8002eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	4b59      	ldr	r3, [pc, #356]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	4b56      	ldr	r3, [pc, #344]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0x136>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_OscConfig+0x13c>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11f      	bne.n	8002e44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	4b4f      	ldr	r3, [pc, #316]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x154>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e25d      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4946      	ldr	r1, [pc, #280]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e30:	4b45      	ldr	r3, [pc, #276]	@ (8002f48 <HAL_RCC_OscConfig+0x280>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fabd 	bl	80013b4 <HAL_InitTick>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d043      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e249      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d023      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3c      	ldr	r2, [pc, #240]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe faf8 	bl	800144c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe faf4 	bl	800144c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e232      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b31      	ldr	r3, [pc, #196]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	492d      	ldr	r1, [pc, #180]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 8002e92:	e01a      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fad4 	bl	800144c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fad0 	bl	800144c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e20e      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eba:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1e0>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d041      	beq.n	8002f5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee4:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe faad 	bl	800144c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe faa9 	bl	800144c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1e7      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f08:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ef      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x22e>
 8002f16:	e020      	b.n	8002f5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe fa90 	bl	800144c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2e:	e00d      	b.n	8002f4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fa8c 	bl	800144c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d906      	bls.n	8002f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1ca      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ea      	bne.n	8002f30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a6 	beq.w	80030b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6c:	4b84      	ldr	r3, [pc, #528]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2b4>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x2b6>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4b7f      	ldr	r3, [pc, #508]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	4a7e      	ldr	r2, [pc, #504]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9e:	4b79      	ldr	r3, [pc, #484]	@ (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002faa:	4b76      	ldr	r3, [pc, #472]	@ (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a75      	ldr	r2, [pc, #468]	@ (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fa49 	bl	800144c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fa45 	bl	800144c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e183      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x32e>
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fea:	4a65      	ldr	r2, [pc, #404]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff4:	e024      	b.n	8003040 <HAL_RCC_OscConfig+0x378>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d110      	bne.n	8003020 <HAL_RCC_OscConfig+0x358>
 8002ffe:	4b60      	ldr	r3, [pc, #384]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	4a5e      	ldr	r2, [pc, #376]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800300e:	4b5c      	ldr	r3, [pc, #368]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x378>
 8003020:	4b57      	ldr	r3, [pc, #348]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	4a56      	ldr	r2, [pc, #344]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fa00 	bl	800144c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe f9fc 	bl	800144c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e138      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ed      	beq.n	8003050 <HAL_RCC_OscConfig+0x388>
 8003074:	e015      	b.n	80030a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fe f9e9 	bl	800144c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe f9e5 	bl	800144c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e121      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003094:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ed      	bne.n	800307e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b35      	ldr	r3, [pc, #212]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	4a34      	ldr	r2, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d03c      	beq.n	800313a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01c      	beq.n	8003102 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe f9b8 	bl	800144c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e0:	f7fe f9b4 	bl	800144c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0f2      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f2:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <HAL_RCC_OscConfig+0x418>
 8003100:	e01b      	b.n	800313a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003102:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003108:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe f99b 	bl	800144c <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800311a:	f7fe f997 	bl	800144c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0d5      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312c:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ef      	bne.n	800311a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80c9 	beq.w	80032d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003144:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f000 8083 	beq.w	8003258 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d15e      	bne.n	8003218 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a08      	ldr	r2, [pc, #32]	@ (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe f971 	bl	800144c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	e00c      	b.n	8003188 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe f96d 	bl	800144c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d905      	bls.n	8003188 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0ab      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	4b55      	ldr	r3, [pc, #340]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ec      	bne.n	800316e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b52      	ldr	r3, [pc, #328]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4b52      	ldr	r3, [pc, #328]	@ (80032e4 <HAL_RCC_OscConfig+0x61c>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a11      	ldr	r1, [r2, #32]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031ae:	0212      	lsls	r2, r2, #8
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031b6:	0852      	lsrs	r2, r2, #1
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0552      	lsls	r2, r2, #21
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	0652      	lsls	r2, r2, #25
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031ce:	06d2      	lsls	r2, r2, #27
 80031d0:	430a      	orrs	r2, r1
 80031d2:	4943      	ldr	r1, [pc, #268]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b41      	ldr	r3, [pc, #260]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a40      	ldr	r2, [pc, #256]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e4:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a3d      	ldr	r2, [pc, #244]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f92c 	bl	800144c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe f928 	bl	800144c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e066      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x530>
 8003216:	e05e      	b.n	80032d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 800321e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe f912 	bl	800144c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe f90e 	bl	800144c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04c      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323e:	4b28      	ldr	r3, [pc, #160]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800324a:	4b25      	ldr	r3, [pc, #148]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	4924      	ldr	r1, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_RCC_OscConfig+0x620>)
 8003252:	4013      	ands	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]
 8003256:	e03e      	b.n	80032d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e039      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003264:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <HAL_RCC_OscConfig+0x618>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	429a      	cmp	r2, r3
 8003276:	d12c      	bne.n	80032d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	3b01      	subs	r3, #1
 8003284:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d123      	bne.n	80032d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d11b      	bne.n	80032d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d113      	bne.n	80032d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	3b01      	subs	r3, #1
 80032cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	019f800c 	.word	0x019f800c
 80032e8:	feeefffc 	.word	0xfeeefffc

080032ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e11e      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b91      	ldr	r3, [pc, #580]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b8e      	ldr	r3, [pc, #568]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 020f 	bic.w	r2, r3, #15
 800331a:	498c      	ldr	r1, [pc, #560]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b8a      	ldr	r3, [pc, #552]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e106      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d073      	beq.n	8003428 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d129      	bne.n	800339c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003348:	4b81      	ldr	r3, [pc, #516]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0f4      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003358:	f000 f99e 	bl	8003698 <RCC_GetSysClockFreqFromPLLSource>
 800335c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4a7c      	ldr	r2, [pc, #496]	@ (8003554 <HAL_RCC_ClockConfig+0x268>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d93f      	bls.n	80033e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003366:	4b7a      	ldr	r3, [pc, #488]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337a:	2b00      	cmp	r3, #0
 800337c:	d033      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d12f      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003386:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800338e:	4a70      	ldr	r2, [pc, #448]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003394:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e024      	b.n	80033e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0c6      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b66      	ldr	r3, [pc, #408]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0be      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033c4:	f000 f8ce 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a61      	ldr	r2, [pc, #388]	@ (8003554 <HAL_RCC_ClockConfig+0x268>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d909      	bls.n	80033e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033da:	4a5d      	ldr	r2, [pc, #372]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 0203 	bic.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4957      	ldr	r1, [pc, #348]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe f828 	bl	800144c <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fe f824 	bl	800144c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e095      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	4b4e      	ldr	r3, [pc, #312]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 020c 	and.w	r2, r3, #12
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	429a      	cmp	r2, r3
 8003426:	d1eb      	bne.n	8003400 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b43      	ldr	r3, [pc, #268]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a42      	ldr	r2, [pc, #264]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800344a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003458:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003460:	4a3b      	ldr	r2, [pc, #236]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4936      	ldr	r1, [pc, #216]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	e008      	b.n	800348e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b80      	cmp	r3, #128	@ 0x80
 8003480:	d105      	bne.n	800348e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003482:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4a32      	ldr	r2, [pc, #200]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800348c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348e:	4b2f      	ldr	r3, [pc, #188]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d21d      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349c:	4b2b      	ldr	r3, [pc, #172]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 020f 	bic.w	r2, r3, #15
 80034a4:	4929      	ldr	r1, [pc, #164]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034ac:	f7fd ffce 	bl	800144c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fd ffca 	bl	800144c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e03b      	b.n	8003542 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCC_ClockConfig+0x260>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1ed      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4917      	ldr	r1, [pc, #92]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490f      	ldr	r1, [pc, #60]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003516:	f000 f825 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <HAL_RCC_ClockConfig+0x264>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490c      	ldr	r1, [pc, #48]	@ (8003558 <HAL_RCC_ClockConfig+0x26c>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <HAL_RCC_ClockConfig+0x270>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_RCC_ClockConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd ff3a 	bl	80013b4 <HAL_InitTick>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	04c4b400 	.word	0x04c4b400
 8003558:	0800576c 	.word	0x0800576c
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800356a:	4b2c      	ldr	r3, [pc, #176]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d102      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e047      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800357c:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d102      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003588:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_RCC_GetSysClockFreq+0xc0>)
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e03e      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d136      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3301      	adds	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c2:	68d2      	ldr	r2, [r2, #12]
 80035c4:	0a12      	lsrs	r2, r2, #8
 80035c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
      break;
 80035d0:	e00c      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d2:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	4a10      	ldr	r2, [pc, #64]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035dc:	68d2      	ldr	r2, [r2, #12]
 80035de:	0a12      	lsrs	r2, r2, #8
 80035e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
      break;
 80035ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0e5b      	lsrs	r3, r3, #25
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	e001      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800360c:	693b      	ldr	r3, [r7, #16]
}
 800360e:	4618      	mov	r0, r3
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	@ (8003668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	0800577c 	.word	0x0800577c

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003670:	f7ff ffda 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4904      	ldr	r1, [pc, #16]	@ (8003694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	0800577c 	.word	0x0800577c

08003698 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369e:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d10c      	bne.n	80036d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036bc:	4a17      	ldr	r2, [pc, #92]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c6:	68d2      	ldr	r2, [r2, #12]
 80036c8:	0a12      	lsrs	r2, r2, #8
 80036ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
    break;
 80036d4:	e00c      	b.n	80036f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d6:	4a12      	ldr	r2, [pc, #72]	@ (8003720 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	0a12      	lsrs	r2, r2, #8
 80036e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
    break;
 80036ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0e5b      	lsrs	r3, r3, #25
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	3301      	adds	r3, #1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800370a:	687b      	ldr	r3, [r7, #4]
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40021000 	.word	0x40021000
 800371c:	007a1200 	.word	0x007a1200
 8003720:	00f42400 	.word	0x00f42400

08003724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800372c:	2300      	movs	r3, #0
 800372e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003730:	2300      	movs	r3, #0
 8003732:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8098 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b43      	ldr	r3, [pc, #268]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b40      	ldr	r3, [pc, #256]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	4a3f      	ldr	r2, [pc, #252]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376e:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a39      	ldr	r2, [pc, #228]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377a:	f7fd fe67 	bl	800144c <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003780:	e009      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fd fe63 	bl	800144c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	74fb      	strb	r3, [r7, #19]
        break;
 8003794:	e005      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003796:	4b30      	ldr	r3, [pc, #192]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d159      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d019      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c4:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d0:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f0:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fd fe23 	bl	800144c <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003808:	e00b      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fd fe1f 	bl	800144c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d902      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	74fb      	strb	r3, [r7, #19]
            break;
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ec      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003844:	4903      	ldr	r1, [pc, #12]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800384c:	e008      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	74bb      	strb	r3, [r7, #18]
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003860:	7c7b      	ldrb	r3, [r7, #17]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4ba7      	ldr	r3, [pc, #668]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	4aa6      	ldr	r2, [pc, #664]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003870:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800387e:	4ba1      	ldr	r3, [pc, #644]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 0203 	bic.w	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	499d      	ldr	r1, [pc, #628]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a0:	4b98      	ldr	r3, [pc, #608]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f023 020c 	bic.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4995      	ldr	r1, [pc, #596]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c2:	4b90      	ldr	r3, [pc, #576]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	498c      	ldr	r1, [pc, #560]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e4:	4b87      	ldr	r3, [pc, #540]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4984      	ldr	r1, [pc, #528]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003906:	4b7f      	ldr	r3, [pc, #508]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	497b      	ldr	r1, [pc, #492]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003928:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	4973      	ldr	r1, [pc, #460]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	496a      	ldr	r1, [pc, #424]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800396c:	4b65      	ldr	r3, [pc, #404]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003972:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4962      	ldr	r1, [pc, #392]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	4959      	ldr	r1, [pc, #356]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039b0:	4b54      	ldr	r3, [pc, #336]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	4951      	ldr	r1, [pc, #324]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	4948      	ldr	r1, [pc, #288]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f4:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	4940      	ldr	r1, [pc, #256]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a14:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a3a      	ldr	r2, [pc, #232]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a2c:	4b35      	ldr	r3, [pc, #212]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	4932      	ldr	r1, [pc, #200]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a64:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	4924      	ldr	r1, [pc, #144]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a82:	d105      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b1f      	ldr	r3, [pc, #124]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4916      	ldr	r1, [pc, #88]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b11      	ldr	r3, [pc, #68]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a10      	ldr	r2, [pc, #64]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	4908      	ldr	r1, [pc, #32]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af4:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a02      	ldr	r2, [pc, #8]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003afe:	60d3      	str	r3, [r2, #12]
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b14:	4b29      	ldr	r3, [pc, #164]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	4926      	ldr	r1, [pc, #152]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b32:	d105      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a20      	ldr	r2, [pc, #128]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5a:	4918      	ldr	r1, [pc, #96]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a12      	ldr	r2, [pc, #72]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b84:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	490a      	ldr	r1, [pc, #40]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e09d      	b.n	8003d0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f976 	bl	8000f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c38:	d902      	bls.n	8003c40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e002      	b.n	8003c46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c4e:	d007      	beq.n	8003c60 <HAL_SPI_Init+0xa0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	ea42 0103 	orr.w	r1, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	f003 0204 	and.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cdc:	ea42 0103 	orr.w	r1, r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e049      	b.n	8003dbc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd f9cf 	bl	80010e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f000 f9ef 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e097      	b.n	8003f08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fd f901 	bl	8000ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003e08:	f023 0307 	bic.w	r3, r3, #7
 8003e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f000 f98d 	bl	8004138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	4313      	orrs	r3, r2
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e64:	f023 030c 	bic.w	r3, r3, #12
 8003e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	4313      	orrs	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	011a      	lsls	r2, r3, #4
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	031b      	lsls	r3, r3, #12
 8003e94:	4313      	orrs	r3, r2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0ff      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b14      	cmp	r3, #20
 8003f3a:	f200 80f0 	bhi.w	800411e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	0800411f 	.word	0x0800411f
 8003f4c:	0800411f 	.word	0x0800411f
 8003f50:	0800411f 	.word	0x0800411f
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	0800411f 	.word	0x0800411f
 8003f5c:	0800411f 	.word	0x0800411f
 8003f60:	0800411f 	.word	0x0800411f
 8003f64:	0800401b 	.word	0x0800401b
 8003f68:	0800411f 	.word	0x0800411f
 8003f6c:	0800411f 	.word	0x0800411f
 8003f70:	0800411f 	.word	0x0800411f
 8003f74:	0800405b 	.word	0x0800405b
 8003f78:	0800411f 	.word	0x0800411f
 8003f7c:	0800411f 	.word	0x0800411f
 8003f80:	0800411f 	.word	0x0800411f
 8003f84:	0800409d 	.word	0x0800409d
 8003f88:	0800411f 	.word	0x0800411f
 8003f8c:	0800411f 	.word	0x0800411f
 8003f90:	0800411f 	.word	0x0800411f
 8003f94:	080040dd 	.word	0x080040dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f97e 	bl	80042a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
      break;
 8003fd6:	e0a5      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f9f8 	bl	80043d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	619a      	str	r2, [r3, #24]
      break;
 8004018:	e084      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fa6b 	bl	80044fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	61da      	str	r2, [r3, #28]
      break;
 8004058:	e064      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fadd 	bl	8004620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	61da      	str	r2, [r3, #28]
      break;
 800409a:	e043      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fb50 	bl	8004748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80040da:	e023      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb9a 	bl	800481c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004106:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800411c:	e002      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      break;
 8004122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4c      	ldr	r2, [pc, #304]	@ (800427c <TIM_Base_SetConfig+0x144>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d017      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004156:	d013      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a49      	ldr	r2, [pc, #292]	@ (8004280 <TIM_Base_SetConfig+0x148>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a48      	ldr	r2, [pc, #288]	@ (8004284 <TIM_Base_SetConfig+0x14c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a47      	ldr	r2, [pc, #284]	@ (8004288 <TIM_Base_SetConfig+0x150>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a46      	ldr	r2, [pc, #280]	@ (800428c <TIM_Base_SetConfig+0x154>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x48>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a45      	ldr	r2, [pc, #276]	@ (8004290 <TIM_Base_SetConfig+0x158>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a39      	ldr	r2, [pc, #228]	@ (800427c <TIM_Base_SetConfig+0x144>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d023      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a0:	d01f      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a36      	ldr	r2, [pc, #216]	@ (8004280 <TIM_Base_SetConfig+0x148>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a35      	ldr	r2, [pc, #212]	@ (8004284 <TIM_Base_SetConfig+0x14c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a34      	ldr	r2, [pc, #208]	@ (8004288 <TIM_Base_SetConfig+0x150>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <TIM_Base_SetConfig+0x154>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a33      	ldr	r2, [pc, #204]	@ (8004294 <TIM_Base_SetConfig+0x15c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a32      	ldr	r2, [pc, #200]	@ (8004298 <TIM_Base_SetConfig+0x160>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a31      	ldr	r2, [pc, #196]	@ (800429c <TIM_Base_SetConfig+0x164>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0xaa>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004290 <TIM_Base_SetConfig+0x158>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	@ (800427c <TIM_Base_SetConfig+0x144>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x110>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1a      	ldr	r2, [pc, #104]	@ (800428c <TIM_Base_SetConfig+0x154>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x110>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <TIM_Base_SetConfig+0x15c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x110>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <TIM_Base_SetConfig+0x160>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x110>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a18      	ldr	r2, [pc, #96]	@ (800429c <TIM_Base_SetConfig+0x164>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x110>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <TIM_Base_SetConfig+0x158>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]
  }
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40015000 	.word	0x40015000
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800

080042a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f023 0201 	bic.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0302 	bic.w	r3, r3, #2
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a30      	ldr	r2, [pc, #192]	@ (80043bc <TIM_OC1_SetConfig+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <TIM_OC1_SetConfig+0x88>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a2f      	ldr	r2, [pc, #188]	@ (80043c0 <TIM_OC1_SetConfig+0x120>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_OC1_SetConfig+0x88>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2e      	ldr	r2, [pc, #184]	@ (80043c4 <TIM_OC1_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_OC1_SetConfig+0x88>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <TIM_OC1_SetConfig+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_OC1_SetConfig+0x88>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a2c      	ldr	r2, [pc, #176]	@ (80043cc <TIM_OC1_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_OC1_SetConfig+0x88>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a2b      	ldr	r2, [pc, #172]	@ (80043d0 <TIM_OC1_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10c      	bne.n	8004342 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0308 	bic.w	r3, r3, #8
 800432e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 0304 	bic.w	r3, r3, #4
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <TIM_OC1_SetConfig+0x11c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_OC1_SetConfig+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1c      	ldr	r2, [pc, #112]	@ (80043c0 <TIM_OC1_SetConfig+0x120>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_OC1_SetConfig+0xd2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <TIM_OC1_SetConfig+0x124>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_OC1_SetConfig+0xd2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1a      	ldr	r2, [pc, #104]	@ (80043c8 <TIM_OC1_SetConfig+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC1_SetConfig+0xd2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <TIM_OC1_SetConfig+0x12c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC1_SetConfig+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <TIM_OC1_SetConfig+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40013400 	.word	0x40013400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	40015000 	.word	0x40015000

080043d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0210 	bic.w	r2, r3, #16
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <TIM_OC2_SetConfig+0x110>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_OC2_SetConfig+0x74>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <TIM_OC2_SetConfig+0x114>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <TIM_OC2_SetConfig+0x118>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10d      	bne.n	8004464 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <TIM_OC2_SetConfig+0x110>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <TIM_OC2_SetConfig+0xc0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <TIM_OC2_SetConfig+0x114>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00f      	beq.n	8004494 <TIM_OC2_SetConfig+0xc0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <TIM_OC2_SetConfig+0x11c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00b      	beq.n	8004494 <TIM_OC2_SetConfig+0xc0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <TIM_OC2_SetConfig+0x120>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <TIM_OC2_SetConfig+0xc0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <TIM_OC2_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_OC2_SetConfig+0xc0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a17      	ldr	r2, [pc, #92]	@ (80044ec <TIM_OC2_SetConfig+0x118>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d113      	bne.n	80044bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800449a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40015000 	.word	0x40015000
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800

080044fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2b      	ldr	r2, [pc, #172]	@ (8004608 <TIM_OC3_SetConfig+0x10c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_OC3_SetConfig+0x72>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2a      	ldr	r2, [pc, #168]	@ (800460c <TIM_OC3_SetConfig+0x110>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC3_SetConfig+0x72>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a29      	ldr	r2, [pc, #164]	@ (8004610 <TIM_OC3_SetConfig+0x114>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10d      	bne.n	800458a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <TIM_OC3_SetConfig+0x10c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <TIM_OC3_SetConfig+0xbe>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1d      	ldr	r2, [pc, #116]	@ (800460c <TIM_OC3_SetConfig+0x110>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_OC3_SetConfig+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <TIM_OC3_SetConfig+0x118>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_OC3_SetConfig+0xbe>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <TIM_OC3_SetConfig+0x11c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC3_SetConfig+0xbe>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <TIM_OC3_SetConfig+0x120>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC3_SetConfig+0xbe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <TIM_OC3_SetConfig+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40015000 	.word	0x40015000
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800465a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800466e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	031b      	lsls	r3, r3, #12
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <TIM_OC4_SetConfig+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_OC4_SetConfig+0x74>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2b      	ldr	r2, [pc, #172]	@ (8004734 <TIM_OC4_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC4_SetConfig+0x74>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2a      	ldr	r2, [pc, #168]	@ (8004738 <TIM_OC4_SetConfig+0x118>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10d      	bne.n	80046b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <TIM_OC4_SetConfig+0x110>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_OC4_SetConfig+0xc0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <TIM_OC4_SetConfig+0x114>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_OC4_SetConfig+0xc0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <TIM_OC4_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_OC4_SetConfig+0xc0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <TIM_OC4_SetConfig+0x120>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_OC4_SetConfig+0xc0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <TIM_OC4_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC4_SetConfig+0xc0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <TIM_OC4_SetConfig+0x118>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d113      	bne.n	8004708 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40015000 	.word	0x40015000
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800478c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <TIM_OC5_SetConfig+0xbc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <TIM_OC5_SetConfig+0x82>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <TIM_OC5_SetConfig+0xc0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <TIM_OC5_SetConfig+0x82>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a17      	ldr	r2, [pc, #92]	@ (800480c <TIM_OC5_SetConfig+0xc4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_OC5_SetConfig+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a16      	ldr	r2, [pc, #88]	@ (8004810 <TIM_OC5_SetConfig+0xc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC5_SetConfig+0x82>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a15      	ldr	r2, [pc, #84]	@ (8004814 <TIM_OC5_SetConfig+0xcc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC5_SetConfig+0x82>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <TIM_OC5_SetConfig+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d109      	bne.n	80047de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40015000 	.word	0x40015000

0800481c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	051b      	lsls	r3, r3, #20
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1a      	ldr	r2, [pc, #104]	@ (80048dc <TIM_OC6_SetConfig+0xc0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d013      	beq.n	80048a0 <TIM_OC6_SetConfig+0x84>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <TIM_OC6_SetConfig+0xc4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00f      	beq.n	80048a0 <TIM_OC6_SetConfig+0x84>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a18      	ldr	r2, [pc, #96]	@ (80048e4 <TIM_OC6_SetConfig+0xc8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <TIM_OC6_SetConfig+0x84>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a17      	ldr	r2, [pc, #92]	@ (80048e8 <TIM_OC6_SetConfig+0xcc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC6_SetConfig+0x84>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <TIM_OC6_SetConfig+0xd0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC6_SetConfig+0x84>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <TIM_OC6_SetConfig+0xd4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d109      	bne.n	80048b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800
 80048f0:	40015000 	.word	0x40015000

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e074      	b.n	80049f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a34      	ldr	r2, [pc, #208]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a33      	ldr	r2, [pc, #204]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a31      	ldr	r2, [pc, #196]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a21      	ldr	r2, [pc, #132]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498c:	d01d      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a11      	ldr	r2, [pc, #68]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d10c      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40013400 	.word	0x40013400
 8004a0c:	40015000 	.word	0x40015000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40014000 	.word	0x40014000

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e042      	b.n	8004ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fc fbd9 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2224      	movs	r2, #36	@ 0x24
 8004a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fb24 	bl	80050b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f825 	bl	8004ac0 <UART_SetConfig>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e01b      	b.n	8004ab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fba3 	bl	80051fc <UART_CheckIdleState>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b08c      	sub	sp, #48	@ 0x30
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4baa      	ldr	r3, [pc, #680]	@ (8004d98 <UART_SetConfig+0x2d8>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8004d9c <UART_SetConfig+0x2dc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f023 010f 	bic.w	r1, r3, #15
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a90      	ldr	r2, [pc, #576]	@ (8004da0 <UART_SetConfig+0x2e0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d125      	bne.n	8004bb0 <UART_SetConfig+0xf0>
 8004b64:	4b8f      	ldr	r3, [pc, #572]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d81a      	bhi.n	8004ba8 <UART_SetConfig+0xe8>
 8004b72:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0xb8>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e116      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e112      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e10e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e10a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e106      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8004da8 <UART_SetConfig+0x2e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d138      	bne.n	8004c2c <UART_SetConfig+0x16c>
 8004bba:	4b7a      	ldr	r3, [pc, #488]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d82d      	bhi.n	8004c24 <UART_SetConfig+0x164>
 8004bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0x110>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0a:	e0d8      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c12:	e0d4      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1a:	e0d0      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c22:	e0cc      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2a:	e0c8      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5e      	ldr	r2, [pc, #376]	@ (8004dac <UART_SetConfig+0x2ec>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d125      	bne.n	8004c82 <UART_SetConfig+0x1c2>
 8004c36:	4b5b      	ldr	r3, [pc, #364]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c40:	2b30      	cmp	r3, #48	@ 0x30
 8004c42:	d016      	beq.n	8004c72 <UART_SetConfig+0x1b2>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d818      	bhi.n	8004c7a <UART_SetConfig+0x1ba>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d00a      	beq.n	8004c62 <UART_SetConfig+0x1a2>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d814      	bhi.n	8004c7a <UART_SetConfig+0x1ba>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <UART_SetConfig+0x19a>
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d008      	beq.n	8004c6a <UART_SetConfig+0x1aa>
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0x1ba>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c60:	e0ad      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c68:	e0a9      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c70:	e0a5      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c72:	2308      	movs	r3, #8
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c78:	e0a1      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c80:	e09d      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4a      	ldr	r2, [pc, #296]	@ (8004db0 <UART_SetConfig+0x2f0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d125      	bne.n	8004cd8 <UART_SetConfig+0x218>
 8004c8c:	4b45      	ldr	r3, [pc, #276]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c98:	d016      	beq.n	8004cc8 <UART_SetConfig+0x208>
 8004c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9c:	d818      	bhi.n	8004cd0 <UART_SetConfig+0x210>
 8004c9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ca0:	d00a      	beq.n	8004cb8 <UART_SetConfig+0x1f8>
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d814      	bhi.n	8004cd0 <UART_SetConfig+0x210>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <UART_SetConfig+0x1f0>
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d008      	beq.n	8004cc0 <UART_SetConfig+0x200>
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x210>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb6:	e082      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cbe:	e07e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc6:	e07a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e076      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd6:	e072      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <UART_SetConfig+0x2f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d12a      	bne.n	8004d38 <UART_SetConfig+0x278>
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf0:	d01a      	beq.n	8004d28 <UART_SetConfig+0x268>
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf6:	d81b      	bhi.n	8004d30 <UART_SetConfig+0x270>
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfc:	d00c      	beq.n	8004d18 <UART_SetConfig+0x258>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d02:	d815      	bhi.n	8004d30 <UART_SetConfig+0x270>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x250>
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0c:	d008      	beq.n	8004d20 <UART_SetConfig+0x260>
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x270>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	e052      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	e04e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d26:	e04a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2e:	e046      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d36:	e042      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <UART_SetConfig+0x2dc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d13a      	bne.n	8004db8 <UART_SetConfig+0x2f8>
 8004d42:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <UART_SetConfig+0x2e4>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d50:	d01a      	beq.n	8004d88 <UART_SetConfig+0x2c8>
 8004d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0x2d0>
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5c:	d00c      	beq.n	8004d78 <UART_SetConfig+0x2b8>
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d62:	d815      	bhi.n	8004d90 <UART_SetConfig+0x2d0>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x2b0>
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6c:	d008      	beq.n	8004d80 <UART_SetConfig+0x2c0>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x2d0>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e022      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e01e      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e01a      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e016      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0x2fe>
 8004d98:	cfff69f3 	.word	0xcfff69f3
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40004400 	.word	0x40004400
 8004dac:	40004800 	.word	0x40004800
 8004db0:	40004c00 	.word	0x40004c00
 8004db4:	40005000 	.word	0x40005000
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4aae      	ldr	r2, [pc, #696]	@ (800507c <UART_SetConfig+0x5bc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f040 8097 	bne.w	8004ef8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d823      	bhi.n	8004e1a <UART_SetConfig+0x35a>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x318>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e1b 	.word	0x08004e1b
 8004de8:	08004e0b 	.word	0x08004e0b
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e1b 	.word	0x08004e1b
 8004df8:	08004e13 	.word	0x08004e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fc20 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e02:	e010      	b.n	8004e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e04:	4b9e      	ldr	r3, [pc, #632]	@ (8005080 <UART_SetConfig+0x5c0>)
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e08:	e00d      	b.n	8004e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0a:	f7fe fbab 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e10:	e009      	b.n	8004e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e18:	e005      	b.n	8004e26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8130 	beq.w	800508e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	4a94      	ldr	r2, [pc, #592]	@ (8005084 <UART_SetConfig+0x5c4>)
 8004e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d305      	bcc.n	8004e5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d903      	bls.n	8004e66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e64:	e113      	b.n	800508e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	2200      	movs	r2, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	60fa      	str	r2, [r7, #12]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	4a84      	ldr	r2, [pc, #528]	@ (8005084 <UART_SetConfig+0x5c4>)
 8004e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e88:	f7fb f9c6 	bl	8000218 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	020b      	lsls	r3, r1, #8
 8004e9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ea2:	0202      	lsls	r2, r0, #8
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	6849      	ldr	r1, [r1, #4]
 8004ea8:	0849      	lsrs	r1, r1, #1
 8004eaa:	2000      	movs	r0, #0
 8004eac:	460c      	mov	r4, r1
 8004eae:	4605      	mov	r5, r0
 8004eb0:	eb12 0804 	adds.w	r8, r2, r4
 8004eb4:	eb43 0905 	adc.w	r9, r3, r5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	469a      	mov	sl, r3
 8004ec0:	4693      	mov	fp, r2
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4649      	mov	r1, r9
 8004eca:	f7fb f9a5 	bl	8000218 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004edc:	d308      	bcc.n	8004ef0 <UART_SetConfig+0x430>
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ee4:	d204      	bcs.n	8004ef0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e0ce      	b.n	800508e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ef6:	e0ca      	b.n	800508e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	d166      	bne.n	8004fd0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d827      	bhi.n	8004f5a <UART_SetConfig+0x49a>
 8004f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <UART_SetConfig+0x450>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f5b 	.word	0x08004f5b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe fb84 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8004f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f3a:	e014      	b.n	8004f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fe fb96 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8004f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f42:	e010      	b.n	8004f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b4e      	ldr	r3, [pc, #312]	@ (8005080 <UART_SetConfig+0x5c0>)
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f48:	e00d      	b.n	8004f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fe fb0b 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f50:	e009      	b.n	8004f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f58:	e005      	b.n	8004f66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8090 	beq.w	800508e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	4a44      	ldr	r2, [pc, #272]	@ (8005084 <UART_SetConfig+0x5c4>)
 8004f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f80:	005a      	lsls	r2, r3, #1
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	441a      	add	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d916      	bls.n	8004fc8 <UART_SetConfig+0x508>
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d212      	bcs.n	8004fc8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f023 030f 	bic.w	r3, r3, #15
 8004faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	8bfb      	ldrh	r3, [r7, #30]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8bfa      	ldrh	r2, [r7, #30]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e062      	b.n	800508e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fce:	e05e      	b.n	800508e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x56a>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x520>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fb1c 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe fb2e 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8005010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005012:	e010      	b.n	8005036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <UART_SetConfig+0x5c0>)
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fe faa3 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005034:	bf00      	nop
    }

    if (pclk != 0U)
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d028      	beq.n	800508e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	4a10      	ldr	r2, [pc, #64]	@ (8005084 <UART_SetConfig+0x5c4>)
 8005042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005046:	461a      	mov	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	fbb3 f2f2 	udiv	r2, r3, r2
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	441a      	add	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d910      	bls.n	8005088 <UART_SetConfig+0x5c8>
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d20c      	bcs.n	8005088 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b29a      	uxth	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e009      	b.n	800508e <UART_SetConfig+0x5ce>
 800507a:	bf00      	nop
 800507c:	40008000 	.word	0x40008000
 8005080:	00f42400 	.word	0x00f42400
 8005084:	08005784 	.word	0x08005784
      }
      else
      {
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2201      	movs	r2, #1
 8005092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2201      	movs	r2, #1
 800509a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2200      	movs	r2, #0
 80050a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3730      	adds	r7, #48	@ 0x30
 80050b2:	46bd      	mov	sp, r7
 80050b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01a      	beq.n	80051ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b6:	d10a      	bne.n	80051ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b098      	sub	sp, #96	@ 0x60
 8005200:	af02      	add	r7, sp, #8
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800520c:	f7fc f91e 	bl	800144c <HAL_GetTick>
 8005210:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d12f      	bne.n	8005280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005228:	2200      	movs	r2, #0
 800522a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f88e 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d022      	beq.n	8005280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800524e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005258:	647b      	str	r3, [r7, #68]	@ 0x44
 800525a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800525e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e063      	b.n	8005348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d149      	bne.n	8005322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005296:	2200      	movs	r2, #0
 8005298:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f857 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d03c      	beq.n	8005322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	623b      	str	r3, [r7, #32]
   return(result);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fa:	61fa      	str	r2, [r7, #28]
 80052fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	69b9      	ldr	r1, [r7, #24]
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	617b      	str	r3, [r7, #20]
   return(result);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e012      	b.n	8005348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3758      	adds	r7, #88	@ 0x58
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	e04f      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d04b      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fc f86f 	bl	800144c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x30>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e04e      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d037      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b80      	cmp	r3, #128	@ 0x80
 8005396:	d034      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b40      	cmp	r3, #64	@ 0x40
 800539c:	d031      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d110      	bne.n	80053ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f838 	bl	800542a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2208      	movs	r2, #8
 80053be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e029      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053dc:	d111      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f81e 	bl	800542a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e00f      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d0a0      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800542a:	b480      	push	{r7}
 800542c:	b095      	sub	sp, #84	@ 0x54
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	61fb      	str	r3, [r7, #28]
   return(result);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e3      	bne.n	8005464 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d118      	bne.n	80054d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f023 0310 	bic.w	r3, r3, #16
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	613b      	str	r3, [r7, #16]
   return(result);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054ea:	bf00      	nop
 80054ec:	3754      	adds	r7, #84	@ 0x54
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UARTEx_DisableFifoMode+0x16>
 8005508:	2302      	movs	r3, #2
 800550a:	e027      	b.n	800555c <HAL_UARTEx_DisableFifoMode+0x66>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	@ 0x24
 8005518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800553a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e02d      	b.n	80055dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	@ 0x24
 800558c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f84f 	bl	8005660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e02d      	b.n	8005658 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	@ 0x24
 8005608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f811 	bl	8005660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005680:	e031      	b.n	80056e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005686:	2308      	movs	r3, #8
 8005688:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	0f5b      	lsrs	r3, r3, #29
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	7b3a      	ldrb	r2, [r7, #12]
 80056ae:	4911      	ldr	r1, [pc, #68]	@ (80056f4 <UARTEx_SetNbDataToProcess+0x94>)
 80056b0:	5c8a      	ldrb	r2, [r1, r2]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056b6:	7b3a      	ldrb	r2, [r7, #12]
 80056b8:	490f      	ldr	r1, [pc, #60]	@ (80056f8 <UARTEx_SetNbDataToProcess+0x98>)
 80056ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	7b7a      	ldrb	r2, [r7, #13]
 80056cc:	4909      	ldr	r1, [pc, #36]	@ (80056f4 <UARTEx_SetNbDataToProcess+0x94>)
 80056ce:	5c8a      	ldrb	r2, [r1, r2]
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d4:	7b7a      	ldrb	r2, [r7, #13]
 80056d6:	4908      	ldr	r1, [pc, #32]	@ (80056f8 <UARTEx_SetNbDataToProcess+0x98>)
 80056d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056da:	fb93 f3f2 	sdiv	r3, r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	0800579c 	.word	0x0800579c
 80056f8:	080057a4 	.word	0x080057a4

080056fc <memset>:
 80056fc:	4402      	add	r2, r0
 80056fe:	4603      	mov	r3, r0
 8005700:	4293      	cmp	r3, r2
 8005702:	d100      	bne.n	8005706 <memset+0xa>
 8005704:	4770      	bx	lr
 8005706:	f803 1b01 	strb.w	r1, [r3], #1
 800570a:	e7f9      	b.n	8005700 <memset+0x4>

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4d0d      	ldr	r5, [pc, #52]	@ (8005744 <__libc_init_array+0x38>)
 8005710:	4c0d      	ldr	r4, [pc, #52]	@ (8005748 <__libc_init_array+0x3c>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	2600      	movs	r6, #0
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	4d0b      	ldr	r5, [pc, #44]	@ (800574c <__libc_init_array+0x40>)
 800571e:	4c0c      	ldr	r4, [pc, #48]	@ (8005750 <__libc_init_array+0x44>)
 8005720:	f000 f818 	bl	8005754 <_init>
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	2600      	movs	r6, #0
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f855 3b04 	ldr.w	r3, [r5], #4
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f855 3b04 	ldr.w	r3, [r5], #4
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	080057b4 	.word	0x080057b4
 8005748:	080057b4 	.word	0x080057b4
 800574c:	080057b4 	.word	0x080057b4
 8005750:	080057b8 	.word	0x080057b8

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
